# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Sensor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, time: str=None, lat: float=None, lon: float=None, soil: float=None, humidity: float=None, temperature: float=None, light: float=None):  # noqa: E501
        """Sensor - a model defined in Swagger

        :param time: The time of this Sensor.  # noqa: E501
        :type time: str
        :param lat: The lat of this Sensor.  # noqa: E501
        :type lat: float
        :param lon: The lon of this Sensor.  # noqa: E501
        :type lon: float
        :param soil: The soil of this Sensor.  # noqa: E501
        :type soil: float
        :param humidity: The humidity of this Sensor.  # noqa: E501
        :type humidity: float
        :param temperature: The temperature of this Sensor.  # noqa: E501
        :type temperature: float
        :param light: The light of this Sensor.  # noqa: E501
        :type light: float
        """
        self.swagger_types = {
            'time': str,
            'lat': float,
            'lon': float,
            'soil': float,
            'humidity': float,
            'temperature': float,
            'light': float
        }

        self.attribute_map = {
            'time': 'time',
            'lat': 'lat',
            'lon': 'lon',
            'soil': 'soil',
            'humidity': 'humidity',
            'temperature': 'temperature',
            'light': 'light'
        }
        self._time = time
        self._lat = lat
        self._lon = lon
        self._soil = soil
        self._humidity = humidity
        self._temperature = temperature
        self._light = light

    @classmethod
    def from_dict(cls, dikt) -> 'Sensor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Sensor of this Sensor.  # noqa: E501
        :rtype: Sensor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time(self) -> str:
        """Gets the time of this Sensor.


        :return: The time of this Sensor.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time: str):
        """Sets the time of this Sensor.


        :param time: The time of this Sensor.
        :type time: str
        """

        self._time = time

    @property
    def lat(self) -> float:
        """Gets the lat of this Sensor.


        :return: The lat of this Sensor.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """Sets the lat of this Sensor.


        :param lat: The lat of this Sensor.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self) -> float:
        """Gets the lon of this Sensor.


        :return: The lon of this Sensor.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon: float):
        """Sets the lon of this Sensor.


        :param lon: The lon of this Sensor.
        :type lon: float
        """

        self._lon = lon

    @property
    def soil(self) -> float:
        """Gets the soil of this Sensor.


        :return: The soil of this Sensor.
        :rtype: float
        """
        return self._soil

    @soil.setter
    def soil(self, soil: float):
        """Sets the soil of this Sensor.


        :param soil: The soil of this Sensor.
        :type soil: float
        """

        self._soil = soil

    @property
    def humidity(self) -> float:
        """Gets the humidity of this Sensor.


        :return: The humidity of this Sensor.
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity: float):
        """Sets the humidity of this Sensor.


        :param humidity: The humidity of this Sensor.
        :type humidity: float
        """

        self._humidity = humidity

    @property
    def temperature(self) -> float:
        """Gets the temperature of this Sensor.


        :return: The temperature of this Sensor.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this Sensor.


        :param temperature: The temperature of this Sensor.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def light(self) -> float:
        """Gets the light of this Sensor.


        :return: The light of this Sensor.
        :rtype: float
        """
        return self._light

    @light.setter
    def light(self, light: float):
        """Sets the light of this Sensor.


        :param light: The light of this Sensor.
        :type light: float
        """

        self._light = light
